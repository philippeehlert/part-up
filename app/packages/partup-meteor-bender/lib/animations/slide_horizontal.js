let SlideHorizontal;
let __bind = function(fn, me) {
  return function() {
    return fn.apply(me, arguments);
  };
};

SlideHorizontal = (function() {
  SlideHorizontal.INSERT = {
    slideLeft: '100%',
    slideRight: '-100%',
  };

  SlideHorizontal.REMOVE = {
    slideLeft: '-100%',
    slideRight: '100%',
  };

  SlideHorizontal.animations = ['slideLeft', 'slideRight'];

  SlideHorizontal.prototype.animationDuration = 600;

  function SlideHorizontal(_at_animation, startCallback, endCallback) {
    this.animation = _at_animation;
    this.removeElement = __bind(this.removeElement, this);
    this.insertElement = __bind(this.insertElement, this);
    this.startCallback = startCallback;
    this.endCallback = endCallback;
  }

  SlideHorizontal.prototype.insertElement = function(node, next) {
    let start;
    start = this.constructor.INSERT[this.animation];
    $.Velocity.hook(node, 'translateX', start);
    if (this.startCallback) this.startCallback();
    $(node).insertBefore(next);
    return $(node).velocity(
      {
        translateX: [0, start],
      },
      {
        duration: this.animationDuration,
        easing: 'ease-in-out',
        queue: false,
      }
    );
  };

  SlideHorizontal.prototype.removeElement = function(node) {
    let end;
    end = this.constructor.REMOVE[this.animation];
    let endCallback = this.endCallback;
    return $(node).velocity(
      {
        translateX: end,
      },
      {
        duration: this.animationDuration,
        easing: 'ease-in-out',
        queue: false,
        complete: function() {
          if (endCallback) endCallback();
          return $(node).remove();
        },
      }
    );
  };

  return SlideHorizontal;
})();

this.Bender.animations.push(SlideHorizontal);

// ---
// generated by coffee-script 1.9.0
